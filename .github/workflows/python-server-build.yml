name: Build Hash-CAD internal Python server

on:
  push:
    tags:
      - 'ps*'  # This workflow runs when you push a tag that starts with 'ps'

jobs:
  build_desktop:
    strategy:
      matrix:
        os: [macos-latest, ubuntu-latest, windows-latest] # [ubuntu-latest, macos-latest, windows-latest, macos-13]
    runs-on: ${{matrix.os}}
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'

      - name: Set up Conda
        uses: conda-incubator/setup-miniconda@v3
        with:
          auto-update-conda: 'true'
          miniconda-version: "latest"
          python-version: '3.11'
          environment-name: 'bcc_packaging'
          activate-environment: 'bcc_packaging'

      - name: Install Conda dependencies
        shell: bash -l {0}  # Important for conda terminal to be accessible
        run: |
          conda install -c conda-forge --file requirements.txt
        working-directory: ./flutter_app/python_server

      - name: Install custom Python library
        shell: bash -l {0}
        run: |
          pip install -e .
        working-directory: .

      # Bundle Python app using Nuitka
      - name: Bundle Python app with Nuitka
        shell: bash -l {0} # Important for conda terminal to be accessible
        run: |
          python -m nuitka --version
          if [ "$RUNNER_OS" == "Windows" ]; then
            python -m nuitka main_server.py --standalone --onefile --output-filename=hamming_server --disable-ccache --output-dir=./nuitka_package --include-module=matplotlib.backends.backend_pdf --include-package=matplotlib.backends --onefile-tempdir-spec={USERPROFILE}\\.nuitka_cache 
          elif [ matrix.os == 'macos-13' ]; then
            echo "SDKROOT=$(xcrun --sdk macosx --show-sdk-path)" >> $GITHUB_ENV
            python -m nuitka main_server.py --standalone --onefile --output-filename=hamming_server --disable-ccache --output-dir=./nuitka_package --include-module=matplotlib.backends.backend_pdf --include-package=matplotlib.backends --nofollow-import-to=matplotlib.backends.macosx --onefile-tempdir-spec={HOME}/.nuitka_cache 
          else
            python -m nuitka main_server.py --standalone --onefile --output-filename=hamming_server --disable-ccache --output-dir=./nuitka_package --include-module=matplotlib.backends.backend_pdf --include-package=matplotlib.backends --nofollow-import-to=matplotlib.backends.macosx --onefile-tempdir-spec={HOME}/.nuitka_cache 
          fi
        working-directory: ./flutter_app/python_server

      # Move Nuitka app to Flutter assets folder
      - name: Move Nuitka app to Flutter assets
        run: |
          mkdir -p ./flutter_app/assets/
          if [ "$RUNNER_OS" == "Windows" ]; then
            mv ./flutter_app/python_server/nuitka_package/hamming_server* ./flutter_app/assets/hamming_server_win.exe
          elif [ "$RUNNER_OS" == "macOS" ]; then
            mv ./flutter_app/python_server/nuitka_package/hamming_server* ./flutter_app/assets/hamming_server_osx
          else 
            mv ./flutter_app/python_server/nuitka_package/hamming_server* ./flutter_app/assets/hamming_server_lnx
          fi
        working-directory: .

      - name: Upload Build Artifacts
        uses: actions/upload-artifact@v4
        with:
          name: hamming-server-${{ matrix.os }}
          path: |
            hamming_server_win.exe
            hamming_server_osx
            hamming_server_lnx
          compression-level: 0
          overwrite: true
        working-directory: ./flutter_app/assets/
