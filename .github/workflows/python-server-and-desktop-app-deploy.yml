name: Build Hash-CAD internal Python server and Flutter Desktop App

on:
  push:
    tags:
      - 'v*'  # This workflow runs when you push a tag that starts with 'v'
  workflow_dispatch:

jobs:
  build_desktop:
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest] # [ubuntu-latest, macos-latest, windows-latest, macos-13]
    runs-on: ${{matrix.os}}
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

########### PYTHON SERVER COMPILATION STARTS HERE ###########

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: Ensure assets directory exists
        run: |
          mkdir -p ./flutter_app/assets/
        shell: bash
        working-directory: .

      - name: Install Linux Dependencies
        if: matrix.os == 'ubuntu-latest'
        run: |
          sudo apt-get update -y
          sudo apt-get install -y ninja-build libgtk-3-dev \
          libgstreamer1.0-dev libgstreamer-plugins-base1.0-dev \
          gstreamer1.0-plugins-good gstreamer1.0-plugins-bad \
          gstreamer1.0-plugins-ugly gstreamer1.0-tools
#          sudo apt-get install libpython3.11-dev

      # Cache the Python server build
      - name: Cache Python server build
        id: cache-python-build
        uses: actions/cache@v3
        with:
          path: ./flutter_app/assets
          key: ${{ matrix.os }}-python-server-${{ hashFiles('./flutter_app/python_server/**', './crisscross/assembly_handle_optimization/**') }}

#      - name: Set up Conda
#        if: steps.cache-python-build.outputs.cache-hit != 'true' && matrix.os != 'windows-latest'
#        uses: conda-incubator/setup-miniconda@v3
#        with:
#          auto-update-conda: 'true'
#          miniconda-version: "latest"
#          python-version: '3.11'
#          activate-environment: 'bcc_packaging'

      - name: Install environment dependencies
        if: steps.cache-python-build.outputs.cache-hit != 'true'
        run: |
          pip install -r requirements.txt
        working-directory: ./flutter_app/python_server

#      - name: Install additional dependency for linux
#        if: steps.cache-python-build.outputs.cache-hit != 'true' && matrix.os == 'ubuntu-latest'
#        run: |
#          conda install -c conda-forge libpython-static
#        working-directory: ./flutter_app/python_server

      - name: Install custom Python library
        if: steps.cache-python-build.outputs.cache-hit != 'true'
        run: |
          pip install -e .
        working-directory: .

      # prepping for intel mac build
      - name: MacOS 13 Prep
        if: steps.cache-python-build.outputs.cache-hit != 'true' && matrix.os == 'macos-13'
        run: |
            echo "SDKROOT=$(xcrun --sdk macosx --show-sdk-path)" >> $GITHUB_ENV
        working-directory: ./flutter_app/python_server

      # Bundle Python app using Nuitka
#      - name: Bundle Python app with Nuitka
#        if: steps.cache-python-build.outputs.cache-hit != 'true' && matrix.os != 'windows-latest'
#        run: |
#          python -m nuitka --version
#          if [ "$RUNNER_OS" == "Windows" ]; then
#            echo "SKIPPING THIS STEP FOR WINDOWS"
#          elif [${{ matrix.os }} == 'macos-13' ]; then
#            echo "SDKROOT=$(xcrun --sdk macosx --show-sdk-path)" >> $GITHUB_ENV
#            python -m nuitka main_server.py --standalone --onefile --output-filename=hamming_server --disable-ccache --output-dir=./nuitka_package --include-module=matplotlib.backends.backend_pdf --nofollow-import-to=matplotlib.backends.macosx --onefile-tempdir-spec={HOME}/.nuitka_cache
#          else
#            python -m nuitka main_server.py --standalone --onefile --output-filename=hamming_server --disable-ccache --output-dir=./nuitka_package --include-module=matplotlib.backends.backend_pdf --nofollow-import-to=matplotlib.backends.macosx --onefile-tempdir-spec={HOME}/.nuitka_cache
#          fi
#        working-directory: ./flutter_app/python_server

        # Bundle Python app using Nuitka
      - name: Bundle Python app with Nuitka
        uses: Nuitka/Nuitka-Action@main
        if: steps.cache-python-build.outputs.cache-hit != 'true' && matrix.os != 'windows-latest'
        with:
          nuitka-version: main
          script-name: main_server.py
          mode: app
          include-module: matplotlib.backends.backend_pdf
          onefile-tempdir-spec: {HOME}/.nuitka_cache
          enable-plugins: no-qt
          working-directory: ./flutter_app/python_server
          output-file: hamming_server
          output-dir: ./nuitka_package

      # Alternative for Windows
      - name: Bundle Python app with Nuitka (Windows)
        uses: Nuitka/Nuitka-Action@main
        if: steps.cache-python-build.outputs.cache-hit != 'true' && matrix.os == 'windows-latest'
        with:
          nuitka-version: main
          script-name: main_server.py
          mode: app
          include-module: matplotlib.backends.backend_pdf
          onefile-tempdir-spec: "{HOME}\\.nuitka_cache"
          enable-plugins: no-qt
          working-directory: ./flutter_app/python_server
          output-file: hamming_server
          output-dir: ./nuitka_package

      # Move Nuitka app to Flutter assets folder
      - name: Move Nuitka app to Flutter assets
        if: steps.cache-python-build.outputs.cache-hit != 'true'
        run: |
          mkdir -p ./flutter_app/assets/
          if [ "$RUNNER_OS" == "Windows" ]; then
            mv ./flutter_app/python_server/nuitka_package/hamming_server* ./flutter_app/assets/hamming_server_win.exe
          elif [ "$RUNNER_OS" == "macOS" ]; then
            mv ./flutter_app/python_server/nuitka_package/hamming_server* ./flutter_app/assets/hamming_server_osx
          else 
            mv ./flutter_app/python_server/nuitka_package/hamming_server* ./flutter_app/assets/hamming_server_lnx
          fi
        working-directory: .

      - name: Verify python server build exists in flutter app
        run: |
          if [ "$RUNNER_OS" == "Windows" ]; then
            ls -la ./flutter_app/assets/hamming_server_win.exe
          elif [ "$RUNNER_OS" == "macOS" ]; then
            ls -la ./flutter_app/assets/hamming_server_osx
          else 
            ls -la ./flutter_app/assets/hamming_server_lnx
          fi
        working-directory: .

########### FLUTTER APP COMPILATION STARTS HERE ###########

      - name: Setup Flutter
        uses: subosito/flutter-action@v2.19.0
        with:
          channel: stable

      - name: Clean Flutter Project
        run: flutter clean
        working-directory: flutter_app

      - name: Install Flutter Dependencies
        run: flutter pub get
        working-directory: flutter_app

      - name: Build Flutter Desktop App
        run: |
          if [ "$RUNNER_OS" == "Windows" ]; then
            flutter build windows --release  
          elif [ "$RUNNER_OS" == "macOS" ]; then
            flutter build macos --release 
          else
            flutter build linux --release  
          fi
        working-directory: flutter_app

      - name: Compress macOS app
        if: runner.os == 'macOS'
        run: ditto -c -k --sequesterRsrc --keepParent ./flutter_app/"build/macos/Build/Products/Release/#-CAD.app" "Hash-CAD-macOS.zip"
        working-directory: .

      - name: Compress Linux build
        if: runner.os == 'Linux'
        run: |
          mkdir -p ./tmp/linux_build_copy
          cp -r ./flutter_app/build/linux/x64/release/bundle ./tmp/linux_build_copy
          tar -czvf "Hash-CAD-linux.tar.gz"  ./tmp/linux_build_copy
        working-directory: .

      - name: Compress Windows build
        if: runner.os == 'Windows'
        run: Compress-Archive -Path build/windows/runner/Release/* -DestinationPath "Hash-CAD-windows.zip"
        shell: pwsh
        working-directory: .

      - name: Upload Build Artifacts
        uses: actions/upload-artifact@v4
        with:
          name: hash-cad-${{ matrix.os }}
          path: |
            ./Hash-CAD-macOS.zip
            ./Hash-CAD-linux.tar.gz
            ./Hash-CAD-windows.zip
          compression-level: 0
          overwrite: true

  release:
    needs: build_desktop
    runs-on: ubuntu-latest
    steps:
      - name: Download Windows Artifact
        uses: actions/download-artifact@v4
        with:
          name: hash-cad-windows-latest
          path: artifacts/

      - name: Download Mac Artifact
        uses: actions/download-artifact@v4
        with:
          name: hash-cad-macos-latest
          path: artifacts/

      - name: Download Linux Artifact
        uses: actions/download-artifact@v4
        with:
          name: hash-cad-ubuntu-latest
          path: artifacts/

      - name: Get tag name
        id: get_tag
        run: echo "TAG=${GITHUB_REF#refs/tags/}" >> $GITHUB_ENV

      - name: List downloaded files
        run: ls -R artifacts

      - name: Create GitHub Release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ github.ref }}
          name: Release ${{ env.TAG }}
          draft: false
          prerelease: true
          generate_release_notes: true
          files: |
              artifacts/Hash-CAD-windows.zip
              artifacts/Hash-CAD-macOS.zip
              artifacts/Hash-CAD-linux.tar.gz
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}


