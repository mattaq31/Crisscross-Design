# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc
import warnings

from . import hamming_evolve_communication_pb2 as hamming__evolve__communication__pb2

GRPC_GENERATED_VERSION = '1.71.0'
GRPC_VERSION = grpc.__version__
_version_not_supported = False

try:
    from grpc._utilities import first_version_is_lower
    _version_not_supported = first_version_is_lower(GRPC_VERSION, GRPC_GENERATED_VERSION)
except ImportError:
    _version_not_supported = True

if _version_not_supported:
    raise RuntimeError(
        f'The grpc package installed is at version {GRPC_VERSION},'
        + f' but the generated code in hamming_evolve_communication_pb2_grpc.py depends on'
        + f' grpcio>={GRPC_GENERATED_VERSION}.'
        + f' Please upgrade your grpc module to grpcio>={GRPC_GENERATED_VERSION}'
        + f' or downgrade your generated code using grpcio-tools<={GRPC_VERSION}.'
    )


class HandleEvolveStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.evolveQuery = channel.unary_stream(
                '/evoService.HandleEvolve/evolveQuery',
                request_serializer=hamming__evolve__communication__pb2.EvolveRequest.SerializeToString,
                response_deserializer=hamming__evolve__communication__pb2.ProgressUpdate.FromString,
                _registered_method=True)
        self.PauseProcessing = channel.unary_unary(
                '/evoService.HandleEvolve/PauseProcessing',
                request_serializer=hamming__evolve__communication__pb2.PauseRequest.SerializeToString,
                response_deserializer=hamming__evolve__communication__pb2.PauseRequest.FromString,
                _registered_method=True)
        self.StopProcessing = channel.unary_unary(
                '/evoService.HandleEvolve/StopProcessing',
                request_serializer=hamming__evolve__communication__pb2.StopRequest.SerializeToString,
                response_deserializer=hamming__evolve__communication__pb2.FinalResponse.FromString,
                _registered_method=True)
        self.requestExport = channel.unary_unary(
                '/evoService.HandleEvolve/requestExport',
                request_serializer=hamming__evolve__communication__pb2.ExportRequest.SerializeToString,
                response_deserializer=hamming__evolve__communication__pb2.ExportResponse.FromString,
                _registered_method=True)


class HandleEvolveServicer(object):
    """Missing associated documentation comment in .proto file."""

    def evolveQuery(self, request, context):
        """Sends the 3D array and parameters, receives a stream of progress updates
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def PauseProcessing(self, request, context):
        """Allows the client to pause the process
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def StopProcessing(self, request, context):
        """Allows the client to stop the process, receives final result
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def requestExport(self, request, context):
        """Allows the client to request a report on the evolution process
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_HandleEvolveServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'evolveQuery': grpc.unary_stream_rpc_method_handler(
                    servicer.evolveQuery,
                    request_deserializer=hamming__evolve__communication__pb2.EvolveRequest.FromString,
                    response_serializer=hamming__evolve__communication__pb2.ProgressUpdate.SerializeToString,
            ),
            'PauseProcessing': grpc.unary_unary_rpc_method_handler(
                    servicer.PauseProcessing,
                    request_deserializer=hamming__evolve__communication__pb2.PauseRequest.FromString,
                    response_serializer=hamming__evolve__communication__pb2.PauseRequest.SerializeToString,
            ),
            'StopProcessing': grpc.unary_unary_rpc_method_handler(
                    servicer.StopProcessing,
                    request_deserializer=hamming__evolve__communication__pb2.StopRequest.FromString,
                    response_serializer=hamming__evolve__communication__pb2.FinalResponse.SerializeToString,
            ),
            'requestExport': grpc.unary_unary_rpc_method_handler(
                    servicer.requestExport,
                    request_deserializer=hamming__evolve__communication__pb2.ExportRequest.FromString,
                    response_serializer=hamming__evolve__communication__pb2.ExportResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'evoService.HandleEvolve', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))
    server.add_registered_method_handlers('evoService.HandleEvolve', rpc_method_handlers)


 # This class is part of an EXPERIMENTAL API.
class HandleEvolve(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def evolveQuery(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_stream(
            request,
            target,
            '/evoService.HandleEvolve/evolveQuery',
            hamming__evolve__communication__pb2.EvolveRequest.SerializeToString,
            hamming__evolve__communication__pb2.ProgressUpdate.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def PauseProcessing(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/evoService.HandleEvolve/PauseProcessing',
            hamming__evolve__communication__pb2.PauseRequest.SerializeToString,
            hamming__evolve__communication__pb2.PauseRequest.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def StopProcessing(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/evoService.HandleEvolve/StopProcessing',
            hamming__evolve__communication__pb2.StopRequest.SerializeToString,
            hamming__evolve__communication__pb2.FinalResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def requestExport(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/evoService.HandleEvolve/requestExport',
            hamming__evolve__communication__pb2.ExportRequest.SerializeToString,
            hamming__evolve__communication__pb2.ExportResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)
