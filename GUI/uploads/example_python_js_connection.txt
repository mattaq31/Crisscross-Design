JAVASCRIPT SIDE

// NEED TO IMPORT SOCKET.IO FIRST IN HTML:  <!-- Socket IO -->
  <script src="../node_modules/socket.io/client-dist/socket.io.js"></script>

// all communication with Python server occurs through socket 9111 (for example)
const socket = io("http://localhost:9111");

// you send data to python via an 'emit' function:
// the variable you send can have any data type but it might not translate well to Python - I think you should experiment with data types and see how Python interprets what's sent over.
socket.emit("laneProfile", window.band_centroids[array_index][1], window.image_height);

// Listening for data sent from function can be achieved in a 'socket.on' function as follows:
socket.on("sourceInPng", function (data) {
    let preview = document.getElementById('preview_img');
    preview.src = 'data:image/png;base64,'.concat(data["image"]);
    let lowerTh = data["otsu"];
    let higherTh = data["otsu"] + 25;
    document.getElementById("bg_value").value = parseInt(lowerTh);
    document.getElementById("fg_value").value = parseInt(higherTh);
    document.getElementById("out_foreground").value = parseInt(higherTh);
    document.getElementById("out_background").value = parseInt(lowerTh);
});
// the 'sourceInPng' is the unique trigger name for the socket defined in Python - see below
// As before, the data type might not necessary translate well from Python to JS - should debug first.

PYTHON SIDE


# This is an example where we used aiohttp instead of Flask - it should hopefully be a very similar process in Flask.

from aiohttp import web
import socketio

sio = socketio.AsyncServer(cors_allowed_origins='*')
app = web.Application()
sio.attach(app)


# the below is an example of how a trigger sent from JS would be read in python
@sio.on("updateBandLabel")
async def updateBandLabel(sid, band_id, updated_label):
    """Updates band label of a single band"""
    global gel_analysis

    gel_analysis.band_dataframe.loc[band_id, "label"] = updated_label

    print("The label of band %s has been changed to %s" % (band_id, updated_label))

    new_labels = json.dumps(gel_analysis.band_dataframe["label"].tolist())

    # this is an example of how Python would send data back to JS
    await sio.emit("labelUpdated", new_labels)


